import { getFirestore } from "redux-firestore"

// TODO *** separate actions for Add type and update type
export const addTypeAction = expenseType => {
  return (dispatch, getState, { getFirebase, getFirstore }) => {
    // async call to firebase
    const firestore = getFirestore()
    firestore
      .collection("expenseTypes")
      .add({
        type: expenseType.type,
        budget: expenseType.budget,
        created: new Date()
      })
      .then(docRef => {
        // set local id to id generated by firebase
        const newID = docRef.id
        expenseType = { ...expenseType, id: newID }
        // resume dispatch
        dispatch({ type: "ADD_TYPE", expenseType })
      })
      .catch(error => {
        // something went wrong with firebase call
        // TODO *** create the add_type_error action
        dispatch({ type: "ADD_TYPE_ERROR", error })
      })
  }
}

export const updateTypeAction = expenseType => {
  console.log("updating")

  return (dispatch, getState, { getFirebase, getFirestore }) => {
    // async firestore call goes here
    const firestore = getFirestore()
    firestore
      .collection("expenseTypes")
      .doc(expenseType.id)
      .set(
        {
          type: expenseType.type,
          budget: expenseType.budget
        },
        { merge: true }
      )
      .then(() => {
        //resume dispatch
        dispatch({ type: "UPDATE_TYPE", expenseType })
      })
      .catch(error => {
        // TODO *** create update type error action
        dispatch({ type: "UDPATE_TYPE_ERRPR", error })
      })
  }
}

export const deleteTypeAction = expenseType => {}
