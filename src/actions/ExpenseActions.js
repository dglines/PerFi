import { getFirestore } from "redux-firestore"

// TODO *** separate actions for Add type and update type
export const addExpenseAction = expense => {
  return (dispatch, getState, { getFirebase, getFirstore }) => {
    // async call to firebase
    const firestore = getFirestore()
    firestore
      .collection("expenses")
      .add({
        ...expense,
        created: new Date()
      })
      .then(docRef => {
        // set local id to id generated by firebase
        const newID = docRef.id
        expense = { ...expense, id: newID }
        // resume dispatch
        dispatch({ type: "ADD_EXPENSE", expense })
      })
      .catch(error => {
        // something went wrong with firebase call
        // TODO *** create the add_EXPENSE_error action
        dispatch({ type: "ADD_EXPENSE_ERROR", error })
      })
  }
}

export const updateExpenseAction = expense => {
  return (dispatch, getState, { getFirebase, getFirestore }) => {
    // async firestore call goes here
    const firestore = getFirestore()
    firestore
      .collection("expenses")
      .doc(expense.id)
      .set(
        {
          id: expense.id,
          type: expense.type,
          amount: expense.amount,
          description: expense.description
        },
        { merge: true }
      )
      .then(() => {
        //resume dispatch
        dispatch({ type: "UPDATE_EXPENSE", expense })
      })
      .catch(error => {
        // TODO *** create update type error action
        dispatch({ type: "UDPATE_EXPENSE_ERRPR", error })
      })
  }
}

export const deleteExpenseAction = id => {
  return (dispatch, getState, { getFirebase, getFirestore }) => {
    const firestore = getFirestore()
    firestore
      .collection("expenses")
      .doc(id)
      .delete()
      .then(() => {
        dispatch({ type: "DELETE_EXPENSE", id })
      })
      .catch(error => {
        dispatch({ type: "DELETE_TYPE_ERROR", error })
      })
  }
}
